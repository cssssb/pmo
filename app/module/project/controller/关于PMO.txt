提交预算
1. A写预算提交至B，B通过审批提交至C，C通过审批提交至D
2. 若A提交的预算在B定义的预算之内，直接通过，否则手动审批,或保留意见向上一级提交审批
3. 预算生成提交审批的过程中、决算生成后，项目不可更改

关于1、2
审批进程表： 生成项目，在项目点击提交预算进行审批时，将项目id、状态字段、时间添加至审批表中，
审批记录表：有项目id，操作人姓名，操作时间，通过或未通过审核，有个关于此条记录的状态字段，只增加不修改
审批过滤表：讲师预算金额、差旅预算金额、等
用户表：账号、密码、token
角色表：name,state,notes,

用户角色关联表:用户id，角色id，创建时间，创建人
权限表:url、版本信息

用户与角色关联表、角色与权限关联表
    一个用户有多个角色，一个角色有多个权限
对于角色为第一级审批者：
    在进入页面后的路由是权限里有的几个路由
    点击需要我审批的接口，发送账户token 获取到用户角色再获取到有无审批权限，权限通过可以操作审批表，
    获取状态字段为0的审批表的项目列表数据，操作通过或不通过审批
对于角色为第二级审批者：
    在进入页面后的路由是权限里有的几个路由
    点击需要我审批的接口，发送账户token 获取到用户角色再获取到有无审批权限，权限通过可以操作审批表，
    获取到预算通过第一级和自动通过的项目进行审批，操作通过或不通过
其余审批者同上
关于3
    有一个在控制器里加载的公共服务。这个服务会在项目不允许动的情况下终止服务，弹出提示：此条项目正在审核
中，不可修改/此条项目已生成决算，不可修改

备忘：
    收入是一个单独的模块，要单独抽象出一个类。预收款不啦不啦~

提交审批者：
点击生成预算进入审核，审核项目id添加至examine_project表中并记录下提交这条项目的人的name（对于这条项目的所有操作都不被允许），
同时，金额的静态数据添加到examine_project_fee表中生成记录，完毕。

//跳过这个节点
审批者：
点击我的审批：发送token，


审批节点：

xx审批了xx项目的xx 通过/未通过 
四个审批
1，xx审批了项目的讲师安排 通过/未通过
2，xx审批了项目的实施安排 通过/未通过
3,xx审批了项目的差旅安排 通过/未通过
再通过上三个审批之后 才能进行第四个审批 如果有一个未通过，会有两种解决办法
1，{
    此条项目作废，重新输入所有的安排，重新进行提交
}
2，{
    //作废
    此条项目通过的继续通过，此条项目进行整改模式，可以操作未通过项的计划，继续提交









    
}
4，xx审批了项目xx  通过/未通过




审批流：
xx用户获取到xx项目进行审批 按项目实施负责人id获取用户id 获取钉钉部门职位树形结构逐层审批
发送： parent_id /  token / type_id / notes
接收：bool （行为的ture,false）
获取type_id 判断审批流程
获取parent_id获取项目实施负责人id，通过角色职位树形结构获取下一步审批人
获取token查找登录用户id 生成添加项目人id

用户登录后点击需要我审批的项目：
发送： token /
获取：在审批流下节奏节点到了自己的职位树状点的项目的parent_id/type_id/notes /executor_name[]/executor_id[]
list{
    {
        id:1,
        parent_id:1,
        type_id:1,
        notes:'十一月三十日北京海淀学院南路项目经理课程',
        executor_name:'张三-赵四-王五',
        executor_id:'1,2,3',
    }
}
点击审批通过或否，
发送：token/pass(1/2)/parent_id/type_id/notes
获取:bool

从这里可以得出，需要的几个类
部门职位树形结构类 
用户账号类            并且部门职员与用户账号是有关联的
审批项目类
审批节点类

//实际操作阶段

预算操作情况：
            进入职位树状图
创建项目->提交预算->主管审批通过->xxx都通过之后->xx未通过    （如果有忘填项目则作废重填）  
则：
    pmo_examine_project     审核项目表state=1，此条项目作废，重新提交重新审核，以及此条项目可进行修改操作
    pmo_examine_project_fee 项目fee静态记录表 parent_id的项目记录state=1数据作废
    pmo_examine_flow        项目节点表，关于这条项目的id，type=这个的 state=2项目作废
    pmo_examine_notes       项目进程表，parent_id 的  state=2 此条数据作废
    
    重新填写，重新提交

创建项目->提交预算->主管审批通过->xxx都通过之后
则：
    pmo_examine_project     审核项目表state=0，此条项目可进行修改操作 process =1 申请人id,
    pmo_examine_project_fee 状态不变
    pmo_examine_flow        项目节点表
    pmo_examine_notes       项目进程表，pass=1 type=1
    
    

决算操作情况：

点击提交决算
则：
    发送：parent_id/token/type_id/notes
    pmo_examine_project 生成一条parent_id为xx的数据，type_id=2，
    pmo_examine_project_fee  生成一条数据 parent_id=xxx,type=2,

进入审核阶段若通过
则:
    获取:tokne(审核人)/parent_id/type_id/
    pmo_examine_notes       项目进程表，pass=1 type=2 admin_user
    pmo_examine_flow        项目节点表//无用废弃暂时先。
    通过用户职位树状结构找到上级继续进行审核
若不通过
     获取:tokne(审核人)/parent_id/type_id/
    pmo_examine_notes       项目进程表，pass=1 type=2 admin_user
    终止行为 pmo_examine_project 中parent_id=xx and type_id=2 的 state = 2决算失败
若全都通过但是发现有需要加费用的情况


    这种操作需要多一个表，用于决算期间费用的增加
    表里的字段有：id/parent_id/time/user_id/notes/state:0未审核，1通过审核，2未通过审核
    ！！！！！！！！！！！！！会修改之前的代码！！！！！！！！！！！！！！！！！！！！！
    讲师预算、实施预算、差旅预算多个表添加费用增加的字段
   
在进行需要加费用时，点击讲师安排增加状态后讲师安排表里 add字段的状态为1


发送：token/parent_id/讲师安排信息(add=1)/
获取:bool
流程：通过token获取账户信息及职位树状图位置逐级向上进行批准


（如果是逐级批准的时候还需要一个记录添加费用的关联表）
添加费用的关联表记录的字段是:id/parent_id/time/admin_user/pass/state
发送：token/parent_id/pass(1/2)
获取bool

若逐级审批全部通过。
增加费用的表state=1 静态储存金额的数字会有改动（有无变化待定） 
{
    1，直接修改静态金额表
}
{
    2，修改静态金额表，state=3，生成新的静态金额表
}
审核未通过。通过项目id把 各个安排表的状态字段改为不可用，逐级审批的记录表所有记录作废，增加金额表的请求的状态作废



职工user 角色表

pmp_tuml_user
@startuml
:提交人:  -->(data)
(data)-->:主管:
:主管:-left.>(true1)
:主管:-right.>(false1)
(true1).>:总监:
(false1)->(主管未通过) 
(主管未通过)->(return false)
(false2)->(总监未通过)
(总监未通过)->(return false)
(false3)->(pmo未通过)
(pmo未通过)->(return false)
:总监:.>(true2)
:总监:.>(false2)
(true2)-->:pmo:
:pmo:.>(true3)
:pmo:.>(false3)
(true3)->:Boos:
:Boos:->(true4)
:Boos:.>(false4)
(true4)-->(return '通过')
(false4)->(Boos未通过)
(Boos未通过)->(return false)
@enduml

类图
类：
类
（Class）
一般包含3个组成部分。第一个是类名；第二个是属性（attributes）；第三个是该类提供的方法（ 类的性质可以放在第四部分；如果类中含有内部类，则会出现第五个组成部分）。
类名部分是不能省略的，其他组成部分可以省略。
类名书写规范：正体字说明类是可被实例化的，斜体字说明类为抽象类。
属性和方法书写规范：修饰符 [描述信息] 属性、方法名称 [参数] [：返回类型|类型]
属性和方法之前可附加的可见性修饰符：
加号（+）表示public；减号（-）表示private；井号(#)表示protected；省略这些修饰符表示具有package（包）级别的可见性。
如果属性或方法具有下划线，则说明它是静态的。
描述信息使用 << 开头，使用 >> 结尾。
类的性质是由一个属性、一个赋值方法和一个取值方法组成。书写方式和方法类似。

常见的关系有：继承（Inheritance），关联关系（Association），聚合关系（Aggregation），复合关系（Composition），依赖关系（Dependency）,
实现关系(Realization/Implementation)。
其中，聚合关系（Aggregation），复合关系（Composition）属于关联关系（Association）。
一般关系表现为继承或实现关系(is a)，关联关系表现为变量(has a )，依赖关系表现为函数中的参
类图中的关系表示
类图中的关系表示
数(use a)。
一般化关系：表示为类与类之间的继承关系，接口与接口之间的继承，类对接口的实现关系。
表示方法： 用一个空心箭头+实线，箭头指向父类。或空心箭头+虚线，如果父类是接口。
关联关系：类与类之间的联接，它使一个类知道另一个类的属性和方法。
表示方法：用 实线+箭头， 箭头指向被使用的类。
聚合关系：是关联关系的一种，是强的关联关系。聚合关系是整体和个体的关系。关联关系的两个类处于同一层次上，而聚合关系两个类处于不同的层次，一个是整体，一个是部分。
表示方法：空心菱形+实线+箭头，箭头指向个体。
合成关系：是关联关系的一种，是比聚合关系强的关系。它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期，合成关系不能共享。
表示方法：实心菱形+实线+箭头，
依赖关系：是类与类之间的连接，表示一个类依赖于另一个类的定义。例如如果A依赖于B，则B体现为局部变量，方法的参数、或静态方法的调用。
表示方法：虚线+箭头 箭头指向被依赖的一方，也就是指向局部变量。

    流程、角色模型（通过角色类做流程）
    审批模型


创建审批流：
Controller
    add
data{
    user_id
    parent_id
    examine_type
}

Service
return true || false
Model
insert

创建审批节点
Controller
    add
    data{
        user_id
        parent_id
        examine_type
    }
Service
通过examine_type判断是应该用什么审批流程
审批流程是抽象的服务
按照审批流程admin_user条数添加多条数据{
    parent_id
    examine_type
    admin_user
}
Model
insert

查看待我审批的审批单
Controller
list
data{
    user_id/token
}
Service
通过user_id在examine_notes表中查找轮到我审批的parent_id，通过查询project_header表将其详细信息返回
Model
select

查看带我审批的审批单状态
Controller
list_examine
data{
    user_id/token
}
Service
通过user_id在examine_notes表中查找此user_id通过审批的状态的parent_id，通过parent_id在表examine_project查找到进程

class 查看待我审批的审批单状态 << (C,#FF7700)>> 
class 查看待我审批的审批单状态服务  << (S,orchid) >>
class 查看待我审批的审批单状态模型  << (M,red) >>
class 查看待我审批的审批单状态{
token
}
class 查看待我审批的审批单状态服务{
通过user_id在examine_notes表中查找此user_id通过审批的状态的parent_id，通过parent_id在表examine_project查找到进程()
}
class 查看待我审批的审批单状态模型{
select()
}
查看待我审批的审批单状态 <|-- 查看待我审批的审批单状态服务
查看待我审批的审批单状态服务 <|-- 查看待我审批的审批单状态模型

查看我已经通过审批的审批单
Controller
list
data{
    user_id/token
}
Service
通过user_id在examine_notes表中查找我审批过的parent_id，通过查询project_header表将其详细信息返回
Model
select
